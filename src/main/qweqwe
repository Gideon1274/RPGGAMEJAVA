package entity;

import main.GamePanel;

import java.awt.event.MouseMotionListener;

import java.awt.event.MouseEvent;

public class Projectile extends Entity implements MouseMotionListener {
    Entity user;
    int mouseX;
    int mouseY;
    double targetAngle;
    public double dx;
    public double dy;
    public Projectile(GamePanel gp) {
        super(gp);
        gp.addMouseMotionListener(this);
    }

    public void set(int worldX, int worldY, boolean alive, Entity user) {
        this.worldX = worldX;
        this.worldY = worldY;
        this.alive = alive;
        this.user = user;
        this.life = this.maxLife;
        
        // Calculate the angle based on the current mouse position
        this.targetAngle = Math.atan2(mouseY - worldY, mouseX - worldX);
        // this.targetAngle = Math.atan2(mouseY - (worldY + gp.screenHeight / 2), mouseX - (worldX + gp.screenWidth / 2));
        
    }
    

    public void update() {
        if (user == gp.player) {
            int monsterIndex = gp.cChecker.checkEntity(this, gp.monster);
            if (monsterIndex != 999) {
                gp.player.damageMonster(monsterIndex, attack);
                alive = false; // projectile alive is false
            }
        }
        if (user != gp.player) {
            boolean contactPlayer = gp.cChecker.checkPlayer(this);
            if (!gp.player.invincible && contactPlayer) {
                damagePlayer(attack);
                alive = false;
            }
        }
        System.out.println("Current Position: X = " + mouseX + ", Y =" + mouseY);
        System.out.println("WORLDPP Position: X = " + worldX + ", Y =" + worldY);
        System.out.println("TargetAngle: "+targetAngle);
        // Update the projectile position based on the mouse position
        
        // worldX += speed * Math.cos(Math.atan2(mouseY - worldY, mouseX - worldX));
        // worldY += speed * Math.sin(Math.atan2(mouseY - worldY, mouseX - worldX));
    
        life--;
        if (life <= 0) {
            alive = false;
            System.out.println("end");
        }
        spriteCounter++;
        if (spriteCounter > 12) {
            if (spriteCounter == 1) {
                spriteNum = 2;
            } else if (spriteCounter == 2) {
                spriteNum = 1;
            }
            spriteCounter = 0;
        }
    }

    @Override
    public void mouseDragged(MouseEvent e) {
        // mouseX = e.getX();
        // mouseY = e.getY();
    }
    // public void mouseMoved(MouseEvent e) {
    //     // Update the mouse position
    //     mouseX = e.getXOnScreen();
    //     mouseY = e.getYOnScreen();

    //     // Calculate the angle based on the current mouse position
        
    // }
    public void mouseMoved(MouseEvent e) {
        // Update the mouse position
        mouseX = e.getX();
        mouseY = e.getY();
        // set(worldX, worldY, alive, user);
        // Pass the correct mouse position to the set() method
        // set(worldX, worldY, alive, user);
    
        // Calculate the angle based on the current mouse position
        // targetAngle = Math.atan2(mouseY - worldY, mouseX - worldX)*180/Math.PI;
    }

    public boolean haveResource(Entity user) {
        boolean haveResource = false;
        return haveResource;
    }

    public void subtractResource(Entity user) {
    }

    // 768x576 pixels
}
