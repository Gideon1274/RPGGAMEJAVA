

User
public class Player extends Entity implements Cloneable{
    
    KeyHandler keyH;
    MouseHandler mouseH;
    public final int screenX;
    public final int screenY;
    int standCounter = 0;
    public boolean attackCanceled = false;
    public ArrayList<Entity> inventory = new ArrayList<>();
    public final int maxInventorySize = 20;

    public Player(GamePanel gp, KeyHandler keyH,MouseHandler mouseH){
        super(gp);
    
        this.keyH = keyH;
        this.mouseH = mouseH;
        screenX = gp.screenWidth/2 - (gp.tileSize/2);
        screenY = gp.screenHeight/2 - (gp.tileSize/2);

        // solidArea = new Rectangle(8, 16 , 24, 24);
        solidArea = new Rectangle();
        solidArea.x = 8;
        solidArea.y = 16;
        solidAreaDefaultX = solidArea.x;
        solidAreaDefaultY = solidArea.y;
        solidArea.width = 24;
        solidArea.height = 24;

        //ATTACK AREA
        // attackArea = new Rectangle(0,0,36,36);


        //height bottom
        //width top
        // x = right
        
        //RESPAWN LOCATION        
        worldX = gp.tileSize * 23;
        worldY = gp.tileSize * 21;
        
        
        
        setDefaultValuesForClasses();
        getPlayerImage();
        getPlayerAttackImage();
        setItems();
    }
    public void setDefaultValuesForClasses(){
        System.out.println(keyH.playerClass);
        if(keyH.playerClass == 1){
        // worldX = gp.tileSize * 8;
        // worldY = gp.tileSize * 6;
        speed = 10; //5
        direction = "down";
        
        //player life status
        
        level = 1;
        maxLife = 69;
        life = maxLife;
        strength = 1;
        dexterity = 1;
        maxMana = 50;
        mana = maxMana;
        exp = 0;
        nextLevelExp = 5;
        coin = 0;
        rateOfFire = 10;
        currentWeapon = new OBJ_Sword_Normal(gp);
        currentShield = new OBJ_Shield_Wood(gp);
        projectile = new OBJ_Fireball(gp);
        // projectile = new OBJ_Rock(gp);
        attack = getAttack();
        defense = getDefense();
        projectileDamage = getProjectileDamage();
        }
        if(keyH.playerClass==2){
            speed = 15; //5
        direction = "down";
        
        //player life status
        
        level = 1;
        maxLife = 30;
        life = maxLife;
        strength = 1;
        dexterity = 1;
        maxMana = 50;
        mana = maxMana;
        exp = 0;
        nextLevelExp = 5;
        coin = 0;
        rateOfFire = 10;
        currentWeapon = new OBJ_Sword_Normal(gp);
        currentShield = new OBJ_Shield_Wood(gp);
        projectile = new OBJ_Fireball(gp);
        // projectile = new OBJ_Rock(gp);
        attack = getAttack();
        defense = getDefense();
        projectileDamage = getProjectileDamage();
        }
        }
    
public class GamePanel extends JPanel implements Runnable{
    
    final int originalTilzeSize = 22;
    final int scale = 3;

    public final int tileSize = originalTilzeSize * scale;
    public final int maxScreenCol = 16;
    public final int maxScreenRow= 12;
    public final int screenWidth = tileSize*maxScreenCol; //768 pixel
    public final int screenHeight = tileSize*maxScreenRow; //576 pixels


    //WORLD SETTINGS
    public final int maxWorldCol = 50;
    public final int maxWorldRow = 50;
    public final int worldWidth = tileSize * maxWorldCol;
    public final int worldHeight = tileSize * maxWorldRow;
    // for full screen
    int screenWidth2 = screenWidth;
    int screenHeight2 = screenHeight;
    BufferedImage tempScreen;
    Graphics2D g2;
    

    public final int FPS = 60;
    
    public TileManager tileM = new TileManager(this);
    public KeyHandler keyH = new KeyHandler(this);
    public MouseHandler mouseH = new MouseHandler(this);
    

    public Sound music = new Sound();
    public Sound se = new Sound();

    
    public CollisionChecker cChecker = new CollisionChecker(this);
    public AssetSetter aSetter = new AssetSetter(this);
    public UI ui = new UI(this);
    public EventHandler eHandler = new EventHandler(this);
    Thread gameThread;

    // entity and object
    public Player player = new Player(this,keyH, mouseH);
    public Entity obj[] = new Entity[100];
    public Entity npc[] = new Entity[10];
    public Entity monster[] = new Entity[20];
    public ArrayList<Entity> projectileList = new ArrayList<>();
    public ArrayList<Entity> entityList = new ArrayList<>();

    //game state
    public int gameState = 0;
    public final int titleState =0;
    public final int playState = 1;
    public final int pauseState = 2;
    public final int dialogueState = 3;
    public final int characterState = 4;
    
    public GamePanel(){
        this.setPreferredSize(new Dimension(screenWidth,screenHeight));
        this.setBackground(Color.black);
        this.setDoubleBuffered(true);
        this.addKeyListener(keyH);
        this.setFocusable(true);
        this.mouseH = new MouseHandler(this);

        this.addMouseListener(mouseH);
        addMouseListener(mouseH);
    }

    public void setupGame(){
        aSetter.setObject();
        aSetter.setNPC();
        aSetter.setMonster();
        aSetter.setTree();
        tempScreen = new BufferedImage(screenWidth, screenHeight,BufferedImage.TYPE_INT_ARGB);
        g2 = (Graphics2D)tempScreen.getGraphics();
        // setFullScreen();
        //diri
        
    }


public class KeyHandler implements KeyListener {
    public boolean upPressed, downPressed, leftPressed,rightPressed, enterPressed, shotKeyPressed;
    GamePanel gp;
    // debugg
    boolean checkDrawTime = false;
    public int playerClass = 1;
    public final int Knight = 1;
    public final int Assassin = 2;
    public final int Caster = 3;
    public KeyHandler(GamePanel gp){
        this.gp =gp;
    }

    @Override
    public void keyTyped(KeyEvent e){
        
    }
    @Override
    public void keyPressed(KeyEvent e){
        int code = e.getKeyCode();

        //title state
        if(gp.gameState == gp.titleState){
            titleState(code);
        }
        //play state
        else if(gp.gameState == gp.playState){
            playState(code);
        }
        //pause state
        else if(gp.pauseState == gp.gameState){
            pauseState(code);
        }
        //dialogue state
        else if(gp.dialogueState == gp.gameState){
            dialogueState(code);
        }
        //character state
        else if(gp.gameState == gp.characterState){
            characterState(code);
        }
        
    }
public void titleState(int code){
        if(gp.ui.titleScreenState == 0){
            if (code == KeyEvent.VK_W){
            
            gp.ui.commandNum--;
            if(gp.ui.commandNum<0){
                gp.ui.commandNum = 2;
            }
            gp.playSE(9);
        }
        if (code == KeyEvent.VK_S){
            gp.ui.commandNum++;
            if(gp.ui.commandNum>2){
                gp.ui.commandNum = 0;
            }
            gp.playSE(9);
        }
        if(code == KeyEvent.VK_ENTER){
            if(gp.ui.commandNum == 0){
                gp.ui.titleScreenState = 1;
            }
            if(gp.ui.commandNum == 1){
                // add
            }
            if(gp.ui.commandNum == 2){
                System.exit(0);
            }
        }
    }

    else if(gp.ui.titleScreenState == 1){
            if (code == KeyEvent.VK_W){
            gp.ui.commandNum--;
            if(gp.ui.commandNum<0){
                gp.ui.commandNum = 3;
                
            }
            gp.playSE(9);
        }
        if (code == KeyEvent.VK_S){
            gp.ui.commandNum++;
            if(gp.ui.commandNum>3){
                gp.ui.commandNum = 0;
            }
            gp.playSE(9);
        }
        if(code == KeyEvent.VK_ENTER){
            if(gp.ui.commandNum == 0){
                playerClass = 1;
                System.out.println("Selected Knight");
                gp.gameState  = gp.playState;
                gp.playMusic(0);
                
            }
            if(gp.ui.commandNum == 1){
                playerClass = 2;
                System.out.println("Selected Assassin");
                gp.gameState  = gp.playState;
                gp.playMusic(0);
                // add
            }
            if(gp.ui.commandNum == 2){
                playerClass = 3;
                System.out.println("Selected Caster");
                gp.gameState  = gp.playState;
                gp.playMusic(0);
            }
            if(gp.ui.commandNum == 3){
                gp.ui.titleScreenState = 0;
            }
        }
    }

public class UI {

    GamePanel gp;
    Graphics2D g2;
    Font purisaBold, maruMonica;
    BufferedImage heart_full, heart_half, heart_blank, crystal_full, crystal_blank;
    public boolean messageOn = false;
    // public String message = "";
    // int messageCounter = 0;
    ArrayList<String> message = new ArrayList<>();
    ArrayList<Integer> messageCounter = new ArrayList<>();
    public boolean gameFinished = false;
    DecimalFormat df = new DecimalFormat("#0.00");
    double playTime;
    public String currentDialogue = "";
    public int commandNum = 0;
    public int titleScreenState = 0; //0 = the first screen, 1 for second screeen
    public int slotCol = 0;
    public int slotRow = 0;

    
    
    public UI(GamePanel gp){
        this.gp = gp;
        try{
            //  InputStream is = getClass().getResourceAsStream("/pics/font/PurisaBold.ttf");
             InputStream is = getClass().getResourceAsStream("/pics/font/maruMonica.ttf");
             maruMonica = Font.createFont(Font.TRUETYPE_FONT,is);
            //  purisaBold = Font.createFont(Font.TRUETYPE_FONT,is);
             
        }catch(FontFormatException e){
            e.printStackTrace();
        }catch(IOException e){
            e.printStackTrace();
        }
       
        //create hud object
        Entity heart = new OBJ_Heart(gp);
        heart_full = heart.image;
        heart_half = heart.image2;
        heart_blank = heart.image3;
        //crystal
        Entity crystal = new OBJ_ManaCrystal(gp);
        crystal_full = crystal.image;
        crystal_blank = crystal.image2;
    

        // arial_40 = new Font("Georgia", Font.PLAIN, 40);
        // arial_80B = new Font("Arial", Font.BOLD, 80);
    }  else if (titleScreenState == 1){
            g2.setColor(Color.white);
            g2.setFont(g2.getFont().deriveFont(42F));

            String text = "Select your class!";
            int x  = getXforCenteredText(text);
            int y = gp.tileSize * 3;
            g2.drawString(text, x, y);

            text = "Knight";
            x = getXforCenteredText(text);
            y+= gp.tileSize*3;
            g2.drawString(text, x, y);
            if(commandNum == 0){
            g2.drawString(">", x-gp.tileSize, y);
            }
            
            text = "Assassin";
            x = getXforCenteredText(text);
            y+= gp.tileSize;
            g2.drawString(text, x, y);
            if(commandNum == 1){
                g2.drawString(">", x-gp.tileSize, y);
            }

            text = "Caster";
            x = getXforCenteredText(text);
            y+= gp.tileSize;
            g2.drawString(text, x, y);
            if(commandNum == 2){
                g2.drawString(">", x-gp.tileSize, y);
            }

            text = "Back";
            x = getXforCenteredText(text);
            y+= gp.tileSize*2;
            g2.drawString(text, x, y);
            if(commandNum == 3){
                g2.drawString(">", x-gp.tileSize, y);
                System.out.println(commandNum);
            }
        }
        
User I want the setdefaultvaluesforclasses() only when the player has chosen in class at the keyhandler but this code choose the defaultvalues at the beginning before I even choose a class